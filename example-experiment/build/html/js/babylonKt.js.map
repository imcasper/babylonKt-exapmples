{"version":3,"file":"babylonKt.js","sources":["../../../../../src/main/kotlin/BABYLON/babylon.Init.kt","../../../../../src/main/kotlin/BABYLON/babylon.module_babylonjs.kt","../../../../../src/main/kotlin/BABYLON/extension/babylon.Helper.kt","generated/_ArraysJs.kt"],"sourcesContent":["package BABYLON\n\nimport org.w3c.dom.HTMLElement\n\nexternal class ClientRect\n\nexternal class AudioNode\nexternal class AudioContext\nexternal class AudioBuffer\n\nexternal interface MouseWheelEvent\nexternal interface GamepadButton\nexternal class BodyInit\nexternal class OffscreenCanvas\nexternal class PointerEventInit\n\nexternal open class Error\nexternal open class ReadonlyArray<T>\nexternal open class WriteableArray<T>\n\ntypealias ArrayLike<T> = Array<T>\ntypealias Number = Double\n\n/**\n * See <a href=https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent#GlobalEventHandlers>https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent#GlobalEventHandlers</a>\n */\nexternal class PointerEvent {\n\tval pointerId:Any\n\tval x:Double\n\tval y:Double\n\tval width:Double\n\tval height:Double\n\n\tval pressure :Double\n\tval tangentialPressure:Double\n\tval tiltX:Double\n\tval tiltY:Double\n\tval twist:Double\n\tval pointerType:Any\n\tval button:Number\n\tval isPrimary:Boolean\n}\n\nclass MouseButton {\n\tcompanion object {\n\t\tval LEFT = 0.0\n\t\tval MIDDLE = 1.0\n\t\tval RIGHT = 2.0\n\t}\n}\nclass SphereOptions (\n\t\tvar segments: Number? = null,\n\t\tvar diameter: Number? = null,\n\t\tvar diameterX: Number? = null,\n\t\tvar diameterY: Number? = null,\n\t\tvar diameterZ: Number? = null,\n\t\tvar arc: Number? = null,\n\t\tvar slice: Number? = null,\n\t\tvar sideOrientation: Number? = null,\n\t\tvar frontUVs: Vector4? = null,\n\t\tvar backUVs: Vector4? = null,\n\t\tvar updatable: Boolean? = null\n)\n\nclass BoxOptions (\n\tvar size: Number? = null,\n\tvar width: Number? = null,\n\tvar height: Number? = null,\n\tvar depth: Number? = null,\n\tvar faceUV: Array<Vector4>? = null,\n\tvar faceColors: Array<Color4>? = null,\n\tvar sideOrientation: Number? = null,\n\tvar frontUVs: Vector4? = null,\n\tvar backUVs: Vector4? = null,\n\tvar updatable: Boolean? = null\n)\n\nclass DiskOptions (\n\tvar radius: Number? = null,\n\tvar tessellation: Number? = null,\n\tvar arc: Number? = null,\n\tvar updatable: Boolean? = null,\n\tvar sideOrientation: Number? = null,\n\tvar frontUVs: Vector4? = null,\n\tvar backUVs: Vector4? = null\n)\n\nclass IcoSphereOptions (\n\tvar radius: Number? = null,\n\tvar radiusX: Number? = null,\n\tvar radiusY: Number? = null,\n\tvar radiusZ: Number? = null,\n\tvar flat: Boolean? = null,\n\tvar subdivisions: Number? = null,\n\tvar sideOrientation: Number? = null,\n\tvar frontUVs: Vector4? = null,\n\tvar backUVs: Vector4? = null,\n\tvar updatable: Boolean? = null\n)\n\nclass IInspectorOptions (\n\tvar embedMode: Boolean? = null,\n\tvar enableClose: Boolean? = null,\n\tvar enablePopup: Boolean? = null,\n\tvar explorerExtensibility: Array<IExplorerExtensibilityGroup>? = null,\n\tvar globalRoot: HTMLElement? = null,\n\tvar handleResize: Boolean? = null,\n\tvar initialTab: DebugLayerTab? = null,\n\tvar inspectorURL: String? = null,\n\tvar overlay: Boolean? = null,\n\tvar showExplorer: Boolean? = null,\n\tvar showInspector: Boolean? = null\n\t)","@file:Suppress(\"INTERFACE_WITH_SUPERCLASS\", \"OVERRIDING_FINAL_MEMBER\", \"RETURN_TYPE_MISMATCH_ON_OVERRIDE\", \"CONFLICTING_OVERLOADS\", \"EXTERNAL_DELEGATION\")\n\nimport platform.*\nimport BABYLON.AudioContext\nimport kotlin.js.*\nimport kotlin.js.Json\nimport org.khronos.webgl.*\nimport org.w3c.dom.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.MediaStream\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\ninline var Window.mozIndexedDB: IDBFactory get() = this.asDynamic().mozIndexedDB; set(value) { this.asDynamic().mozIndexedDB = value }\n\ninline var Window.webkitIndexedDB: IDBFactory get() = this.asDynamic().webkitIndexedDB; set(value) { this.asDynamic().webkitIndexedDB = value }\n\ninline var Window.msIndexedDB: IDBFactory get() = this.asDynamic().msIndexedDB; set(value) { this.asDynamic().msIndexedDB = value }\n\ninline var Window.webkitURL: Any get() = this.asDynamic().webkitURL; set(value) { this.asDynamic().webkitURL = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun Window.mozRequestAnimationFrame(callback: FrameRequestCallback): Number = this.asDynamic().mozRequestAnimationFrame(callback)\n\n/* extending interface from lib.dom.d.ts */\ninline fun Window.oRequestAnimationFrame(callback: FrameRequestCallback): Number = this.asDynamic().oRequestAnimationFrame(callback)\n\ninline var Window.WebGLRenderingContext: WebGLRenderingContext get() = this.asDynamic().WebGLRenderingContext; set(value) { this.asDynamic().WebGLRenderingContext = value }\n\ninline var Window.MSGesture: MSGesture get() = this.asDynamic().MSGesture; set(value) { this.asDynamic().MSGesture = value }\n\ninline var Window.CANNON: Any get() = this.asDynamic().CANNON; set(value) { this.asDynamic().CANNON = value }\n\ninline var Window.AudioContext: AudioContext get() = this.asDynamic().AudioContext; set(value) { this.asDynamic().AudioContext = value }\n\ninline var Window.webkitAudioContext: AudioContext get() = this.asDynamic().webkitAudioContext; set(value) { this.asDynamic().webkitAudioContext = value }\n\ninline var Window.PointerEvent: Any get() = this.asDynamic().PointerEvent; set(value) { this.asDynamic().PointerEvent = value }\n\ninline var Window.Math: Math get() = this.asDynamic().Math; set(value) { this.asDynamic().Math = value }\n\ninline var Window.Uint8Array: Uint8ArrayConstructor get() = this.asDynamic().Uint8Array; set(value) { this.asDynamic().Uint8Array = value }\n\ninline var Window.Float32Array: Float32ArrayConstructor get() = this.asDynamic().Float32Array; set(value) { this.asDynamic().Float32Array = value }\n\ninline var Window.mozURL: Any get() = this.asDynamic().mozURL; set(value) { this.asDynamic().mozURL = value }\n\ninline var Window.msURL: Any get() = this.asDynamic().msURL; set(value) { this.asDynamic().msURL = value }\n\ninline var Window.VRFrameData: Any get() = this.asDynamic().VRFrameData; set(value) { this.asDynamic().VRFrameData = value }\n\ninline var Window.DracoDecoderModule: Any get() = this.asDynamic().DracoDecoderModule; set(value) { this.asDynamic().DracoDecoderModule = value }\n\n/* extending interface from lib.dom.d.ts */\n//inline fun Window.setImmediate(handler: (args: Array<Any>) -> Unit): Number = this.asDynamic().setImmediate(handler)\n\n/* extending interface from lib.dom.d.ts */\ninline fun HTMLCanvasElement.requestPointerLock() { this.asDynamic().requestPointerLock() }\n\n/* extending interface from lib.dom.d.ts */\ninline fun HTMLCanvasElement.msRequestPointerLock() { this.asDynamic().msRequestPointerLock() }\n\n/* extending interface from lib.dom.d.ts */\ninline fun HTMLCanvasElement.mozRequestPointerLock() { this.asDynamic().mozRequestPointerLock() }\n\n/* extending interface from lib.dom.d.ts */\ninline fun HTMLCanvasElement.webkitRequestPointerLock() { this.asDynamic().webkitRequestPointerLock() }\n\ninline var HTMLCanvasElement.isRecording: Boolean get() = this.asDynamic().isRecording; set(value) { this.asDynamic().isRecording = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun HTMLCanvasElement.captureStream(): MediaStream = this.asDynamic().captureStream()\n\ninline fun HTMLCanvasElement.captureStream(fps: Number): MediaStream = this.asDynamic().captureStream(fps)\n\ninline var CanvasRenderingContext2D.msImageSmoothingEnabled: Boolean get() = this.asDynamic().msImageSmoothingEnabled; set(value) { this.asDynamic().msImageSmoothingEnabled = value }\n\ninline var MouseEvent.mozMovementX: Number get() = this.asDynamic().mozMovementX; set(value) { this.asDynamic().mozMovementX = value }\n\ninline var MouseEvent.mozMovementY: Number get() = this.asDynamic().mozMovementY; set(value) { this.asDynamic().mozMovementY = value }\n\ninline var MouseEvent.webkitMovementX: Number get() = this.asDynamic().webkitMovementX; set(value) { this.asDynamic().webkitMovementX = value }\n\ninline var MouseEvent.webkitMovementY: Number get() = this.asDynamic().webkitMovementY; set(value) { this.asDynamic().webkitMovementY = value }\n\ninline var MouseEvent.msMovementX: Number get() = this.asDynamic().msMovementX; set(value) { this.asDynamic().msMovementX = value }\n\ninline var MouseEvent.msMovementY: Number get() = this.asDynamic().msMovementY; set(value) { this.asDynamic().msMovementY = value }\n\n//inline var Navigator.mozGetVRDevices: (any: Any) -> Any get() = this.asDynamic().mozGetVRDevices; set(value) { this.asDynamic().mozGetVRDevices = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun Navigator.webkitGetUserMedia(constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) { this.asDynamic().webkitGetUserMedia(constraints, successCallback, errorCallback) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun Navigator.mozGetUserMedia(constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) { this.asDynamic().mozGetUserMedia(constraints, successCallback, errorCallback) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun Navigator.msGetUserMedia(constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) { this.asDynamic().msGetUserMedia(constraints, successCallback, errorCallback) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun Navigator.webkitGetGamepads(): Array<Gamepad> = this.asDynamic().webkitGetGamepads()\n\n/* extending interface from lib.dom.d.ts */\ninline fun Navigator.msGetGamepads(): Array<Gamepad> = this.asDynamic().msGetGamepads()\n\n/* extending interface from lib.dom.d.ts */\ninline fun Navigator.webkitGamepads(): Array<Gamepad> = this.asDynamic().webkitGamepads()\n\ninline var HTMLVideoElement.mozSrcObject: Any get() = this.asDynamic().mozSrcObject; set(value) { this.asDynamic().mozSrcObject = value }\n\n/* extending interface from lib.es5.d.ts */\ninline fun Math.fround(x: Number): Number = this.asDynamic().fround(x)\n\n/* extending interface from lib.es5.d.ts */\ninline fun Math.imul(a: Number, b: Number): Number = this.asDynamic().imul(a, b)\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.drawArraysInstanced(mode: Number, first: Number, count: Number, primcount: Number) { this.asDynamic().drawArraysInstanced(mode, first, count, primcount) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.drawElementsInstanced(mode: Number, count: Number, type: Number, offset: Number, primcount: Number) { this.asDynamic().drawElementsInstanced(mode, count, type, offset, primcount) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.vertexAttribDivisor(index: Number, divisor: Number) { this.asDynamic().vertexAttribDivisor(index, divisor) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.createVertexArray(): Any = this.asDynamic().createVertexArray()\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.bindVertexArray() { this.asDynamic().bindVertexArray() }\n\ninline fun WebGLRenderingContext.bindVertexArray(vao: WebGLVertexArrayObject?) { this.asDynamic().bindVertexArray(vao) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.deleteVertexArray(vao: WebGLVertexArrayObject) { this.asDynamic().deleteVertexArray(vao) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.blitFramebuffer(srcX0: Number, srcY0: Number, srcX1: Number, srcY1: Number, dstX0: Number, dstY0: Number, dstX1: Number, dstY1: Number, mask: Number, filter: Number) { this.asDynamic().blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.renderbufferStorageMultisample(target: Number, samples: Number, internalformat: Number, width: Number, height: Number) { this.asDynamic().renderbufferStorageMultisample(target, samples, internalformat, width, height) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.bindBufferBase(target: Number, index: Number, buffer: WebGLBuffer?) { this.asDynamic().bindBufferBase(target, index, buffer) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.getUniformBlockIndex(program: WebGLProgram, uniformBlockName: String): Number = this.asDynamic().getUniformBlockIndex(program, uniformBlockName)\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: Number, uniformBlockBinding: Number) { this.asDynamic().uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.createQuery(): WebGLQuery = this.asDynamic().createQuery()\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.deleteQuery(query: WebGLQuery) { this.asDynamic().deleteQuery(query) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.beginQuery(target: Number, query: WebGLQuery) { this.asDynamic().beginQuery(target, query) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.endQuery(target: Number) { this.asDynamic().endQuery(target) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.getQueryParameter(query: WebGLQuery, pname: Number): Any = this.asDynamic().getQueryParameter(query, pname)\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.getQuery(target: Number, pname: Number): Any = this.asDynamic().getQuery(target, pname)\n\ninline var WebGLRenderingContext.MAX_SAMPLES: Number get() = this.asDynamic().MAX_SAMPLES; set(value) { this.asDynamic().MAX_SAMPLES = value }\n\ninline var WebGLRenderingContext.RGBA8: Number get() = this.asDynamic().RGBA8; set(value) { this.asDynamic().RGBA8 = value }\n\ninline var WebGLRenderingContext.READ_FRAMEBUFFER: Number get() = this.asDynamic().READ_FRAMEBUFFER; set(value) { this.asDynamic().READ_FRAMEBUFFER = value }\n\ninline var WebGLRenderingContext.DRAW_FRAMEBUFFER: Number get() = this.asDynamic().DRAW_FRAMEBUFFER; set(value) { this.asDynamic().DRAW_FRAMEBUFFER = value }\n\ninline var WebGLRenderingContext.UNIFORM_BUFFER: Number get() = this.asDynamic().UNIFORM_BUFFER; set(value) { this.asDynamic().UNIFORM_BUFFER = value }\n\ninline var WebGLRenderingContext.HALF_FLOAT_OES: Number get() = this.asDynamic().HALF_FLOAT_OES; set(value) { this.asDynamic().HALF_FLOAT_OES = value }\n\ninline var WebGLRenderingContext.RGBA16F: Number get() = this.asDynamic().RGBA16F; set(value) { this.asDynamic().RGBA16F = value }\n\ninline var WebGLRenderingContext.RGBA32F: Number get() = this.asDynamic().RGBA32F; set(value) { this.asDynamic().RGBA32F = value }\n\ninline var WebGLRenderingContext.R32F: Number get() = this.asDynamic().R32F; set(value) { this.asDynamic().R32F = value }\n\ninline var WebGLRenderingContext.RG32F: Number get() = this.asDynamic().RG32F; set(value) { this.asDynamic().RG32F = value }\n\ninline var WebGLRenderingContext.RGB32F: Number get() = this.asDynamic().RGB32F; set(value) { this.asDynamic().RGB32F = value }\n\ninline var WebGLRenderingContext.R16F: Number get() = this.asDynamic().R16F; set(value) { this.asDynamic().R16F = value }\n\ninline var WebGLRenderingContext.RG16F: Number get() = this.asDynamic().RG16F; set(value) { this.asDynamic().RG16F = value }\n\ninline var WebGLRenderingContext.RGB16F: Number get() = this.asDynamic().RGB16F; set(value) { this.asDynamic().RGB16F = value }\n\ninline var WebGLRenderingContext.RED: Number get() = this.asDynamic().RED; set(value) { this.asDynamic().RED = value }\n\ninline var WebGLRenderingContext.RG: Number get() = this.asDynamic().RG; set(value) { this.asDynamic().RG = value }\n\ninline var WebGLRenderingContext.R8: Number get() = this.asDynamic().R8; set(value) { this.asDynamic().R8 = value }\n\ninline var WebGLRenderingContext.RG8: Number get() = this.asDynamic().RG8; set(value) { this.asDynamic().RG8 = value }\n\ninline var WebGLRenderingContext.UNSIGNED_INT_24_8: Number get() = this.asDynamic().UNSIGNED_INT_24_8; set(value) { this.asDynamic().UNSIGNED_INT_24_8 = value }\n\ninline var WebGLRenderingContext.DEPTH24_STENCIL8: Number get() = this.asDynamic().DEPTH24_STENCIL8; set(value) { this.asDynamic().DEPTH24_STENCIL8 = value }\n\ninline var WebGLRenderingContext.MIN: Number get() = this.asDynamic().MIN; set(value) { this.asDynamic().MIN = value }\n\ninline var WebGLRenderingContext.MAX: Number get() = this.asDynamic().MAX; set(value) { this.asDynamic().MAX = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.drawBuffers(buffers: Array<Number>) { this.asDynamic().drawBuffers(buffers) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.readBuffer(src: Number) { this.asDynamic().readBuffer(src) }\n\ninline var WebGLRenderingContext.COLOR_ATTACHMENT0: Number get() = this.asDynamic().COLOR_ATTACHMENT0; set(value) { this.asDynamic().COLOR_ATTACHMENT0 = value }\n\ninline var WebGLRenderingContext.COLOR_ATTACHMENT1: Number get() = this.asDynamic().COLOR_ATTACHMENT1; set(value) { this.asDynamic().COLOR_ATTACHMENT1 = value }\n\ninline var WebGLRenderingContext.COLOR_ATTACHMENT2: Number get() = this.asDynamic().COLOR_ATTACHMENT2; set(value) { this.asDynamic().COLOR_ATTACHMENT2 = value }\n\ninline var WebGLRenderingContext.COLOR_ATTACHMENT3: Number get() = this.asDynamic().COLOR_ATTACHMENT3; set(value) { this.asDynamic().COLOR_ATTACHMENT3 = value }\n\ninline var WebGLRenderingContext.ANY_SAMPLES_PASSED_CONSERVATIVE: Number get() = this.asDynamic().ANY_SAMPLES_PASSED_CONSERVATIVE; set(value) { this.asDynamic().ANY_SAMPLES_PASSED_CONSERVATIVE = value }\n\ninline var WebGLRenderingContext.ANY_SAMPLES_PASSED: Number get() = this.asDynamic().ANY_SAMPLES_PASSED; set(value) { this.asDynamic().ANY_SAMPLES_PASSED = value }\n\ninline var WebGLRenderingContext.QUERY_RESULT_AVAILABLE: Number get() = this.asDynamic().QUERY_RESULT_AVAILABLE; set(value) { this.asDynamic().QUERY_RESULT_AVAILABLE = value }\n\ninline var WebGLRenderingContext.QUERY_RESULT: Number get() = this.asDynamic().QUERY_RESULT; set(value) { this.asDynamic().QUERY_RESULT = value }\n\ninline var WebGLProgram.__SPECTOR_rebuildProgram: ((vertexSourceCode: String, fragmentSourceCode: String, onCompiled: (program: WebGLProgram) -> Unit, onError: (message: String) -> Unit) -> Unit)? get() = this.asDynamic().__SPECTOR_rebuildProgram; set(value) { this.asDynamic().__SPECTOR_rebuildProgram = value }\n\nexternal interface EXT_disjoint_timer_query {\n    var QUERY_COUNTER_BITS_EXT: Number\n    var TIME_ELAPSED_EXT: Number\n    var TIMESTAMP_EXT: Number\n    var GPU_DISJOINT_EXT: Number\n    var QUERY_RESULT_EXT: Number\n    var QUERY_RESULT_AVAILABLE_EXT: Number\n    fun queryCounterEXT(query: WebGLQuery, target: Number)\n    fun createQueryEXT(): WebGLQuery\n    fun beginQueryEXT(target: Number, query: WebGLQuery)\n    fun endQueryEXT(target: Number)\n    fun getQueryObjectEXT(query: WebGLQuery, target: Number): Any\n    fun deleteQueryEXT(query: WebGLQuery)\n}\n\ninline var WebGLUniformLocation._currentState: Any get() = this.asDynamic()._currentState; set(value) { this.asDynamic()._currentState = value }\n\ninline var WebGLRenderingContext.RASTERIZER_DISCARD: Number get() = this.asDynamic().RASTERIZER_DISCARD; set(value) { this.asDynamic().RASTERIZER_DISCARD = value }\n\ninline var WebGLRenderingContext.DEPTH_COMPONENT24: Number get() = this.asDynamic().DEPTH_COMPONENT24; set(value) { this.asDynamic().DEPTH_COMPONENT24 = value }\n\ninline var WebGLRenderingContext.TEXTURE_3D: Number get() = this.asDynamic().TEXTURE_3D; set(value) { this.asDynamic().TEXTURE_3D = value }\n\ninline var WebGLRenderingContext.TEXTURE_2D_ARRAY: Number get() = this.asDynamic().TEXTURE_2D_ARRAY; set(value) { this.asDynamic().TEXTURE_2D_ARRAY = value }\n\ninline var WebGLRenderingContext.TEXTURE_COMPARE_FUNC: Number get() = this.asDynamic().TEXTURE_COMPARE_FUNC; set(value) { this.asDynamic().TEXTURE_COMPARE_FUNC = value }\n\ninline var WebGLRenderingContext.TEXTURE_COMPARE_MODE: Number get() = this.asDynamic().TEXTURE_COMPARE_MODE; set(value) { this.asDynamic().TEXTURE_COMPARE_MODE = value }\n\ninline var WebGLRenderingContext.COMPARE_REF_TO_TEXTURE: Number get() = this.asDynamic().COMPARE_REF_TO_TEXTURE; set(value) { this.asDynamic().COMPARE_REF_TO_TEXTURE = value }\n\ninline var WebGLRenderingContext.TEXTURE_WRAP_R: Number get() = this.asDynamic().TEXTURE_WRAP_R; set(value) { this.asDynamic().TEXTURE_WRAP_R = value }\n\ninline var WebGLRenderingContext.HALF_FLOAT: Number get() = this.asDynamic().HALF_FLOAT; set(value) { this.asDynamic().HALF_FLOAT = value }\n\ninline var WebGLRenderingContext.RGB8: Number get() = this.asDynamic().RGB8; set(value) { this.asDynamic().RGB8 = value }\n\ninline var WebGLRenderingContext.RED_INTEGER: Number get() = this.asDynamic().RED_INTEGER; set(value) { this.asDynamic().RED_INTEGER = value }\n\ninline var WebGLRenderingContext.RG_INTEGER: Number get() = this.asDynamic().RG_INTEGER; set(value) { this.asDynamic().RG_INTEGER = value }\n\ninline var WebGLRenderingContext.RGB_INTEGER: Number get() = this.asDynamic().RGB_INTEGER; set(value) { this.asDynamic().RGB_INTEGER = value }\n\ninline var WebGLRenderingContext.RGBA_INTEGER: Number get() = this.asDynamic().RGBA_INTEGER; set(value) { this.asDynamic().RGBA_INTEGER = value }\n\ninline var WebGLRenderingContext.R8_SNORM: Number get() = this.asDynamic().R8_SNORM; set(value) { this.asDynamic().R8_SNORM = value }\n\ninline var WebGLRenderingContext.RG8_SNORM: Number get() = this.asDynamic().RG8_SNORM; set(value) { this.asDynamic().RG8_SNORM = value }\n\ninline var WebGLRenderingContext.RGB8_SNORM: Number get() = this.asDynamic().RGB8_SNORM; set(value) { this.asDynamic().RGB8_SNORM = value }\n\ninline var WebGLRenderingContext.RGBA8_SNORM: Number get() = this.asDynamic().RGBA8_SNORM; set(value) { this.asDynamic().RGBA8_SNORM = value }\n\ninline var WebGLRenderingContext.R8I: Number get() = this.asDynamic().R8I; set(value) { this.asDynamic().R8I = value }\n\ninline var WebGLRenderingContext.RG8I: Number get() = this.asDynamic().RG8I; set(value) { this.asDynamic().RG8I = value }\n\ninline var WebGLRenderingContext.RGB8I: Number get() = this.asDynamic().RGB8I; set(value) { this.asDynamic().RGB8I = value }\n\ninline var WebGLRenderingContext.RGBA8I: Number get() = this.asDynamic().RGBA8I; set(value) { this.asDynamic().RGBA8I = value }\n\ninline var WebGLRenderingContext.R8UI: Number get() = this.asDynamic().R8UI; set(value) { this.asDynamic().R8UI = value }\n\ninline var WebGLRenderingContext.RG8UI: Number get() = this.asDynamic().RG8UI; set(value) { this.asDynamic().RG8UI = value }\n\ninline var WebGLRenderingContext.RGB8UI: Number get() = this.asDynamic().RGB8UI; set(value) { this.asDynamic().RGB8UI = value }\n\ninline var WebGLRenderingContext.RGBA8UI: Number get() = this.asDynamic().RGBA8UI; set(value) { this.asDynamic().RGBA8UI = value }\n\ninline var WebGLRenderingContext.R16I: Number get() = this.asDynamic().R16I; set(value) { this.asDynamic().R16I = value }\n\ninline var WebGLRenderingContext.RG16I: Number get() = this.asDynamic().RG16I; set(value) { this.asDynamic().RG16I = value }\n\ninline var WebGLRenderingContext.RGB16I: Number get() = this.asDynamic().RGB16I; set(value) { this.asDynamic().RGB16I = value }\n\ninline var WebGLRenderingContext.RGBA16I: Number get() = this.asDynamic().RGBA16I; set(value) { this.asDynamic().RGBA16I = value }\n\ninline var WebGLRenderingContext.R16UI: Number get() = this.asDynamic().R16UI; set(value) { this.asDynamic().R16UI = value }\n\ninline var WebGLRenderingContext.RG16UI: Number get() = this.asDynamic().RG16UI; set(value) { this.asDynamic().RG16UI = value }\n\ninline var WebGLRenderingContext.RGB16UI: Number get() = this.asDynamic().RGB16UI; set(value) { this.asDynamic().RGB16UI = value }\n\ninline var WebGLRenderingContext.RGBA16UI: Number get() = this.asDynamic().RGBA16UI; set(value) { this.asDynamic().RGBA16UI = value }\n\ninline var WebGLRenderingContext.R32I: Number get() = this.asDynamic().R32I; set(value) { this.asDynamic().R32I = value }\n\ninline var WebGLRenderingContext.RG32I: Number get() = this.asDynamic().RG32I; set(value) { this.asDynamic().RG32I = value }\n\ninline var WebGLRenderingContext.RGB32I: Number get() = this.asDynamic().RGB32I; set(value) { this.asDynamic().RGB32I = value }\n\ninline var WebGLRenderingContext.RGBA32I: Number get() = this.asDynamic().RGBA32I; set(value) { this.asDynamic().RGBA32I = value }\n\ninline var WebGLRenderingContext.R32UI: Number get() = this.asDynamic().R32UI; set(value) { this.asDynamic().R32UI = value }\n\ninline var WebGLRenderingContext.RG32UI: Number get() = this.asDynamic().RG32UI; set(value) { this.asDynamic().RG32UI = value }\n\ninline var WebGLRenderingContext.RGB32UI: Number get() = this.asDynamic().RGB32UI; set(value) { this.asDynamic().RGB32UI = value }\n\ninline var WebGLRenderingContext.RGBA32UI: Number get() = this.asDynamic().RGBA32UI; set(value) { this.asDynamic().RGBA32UI = value }\n\ninline var WebGLRenderingContext.RGB10_A2UI: Number get() = this.asDynamic().RGB10_A2UI; set(value) { this.asDynamic().RGB10_A2UI = value }\n\ninline var WebGLRenderingContext.R11F_G11F_B10F: Number get() = this.asDynamic().R11F_G11F_B10F; set(value) { this.asDynamic().R11F_G11F_B10F = value }\n\ninline var WebGLRenderingContext.RGB9_E5: Number get() = this.asDynamic().RGB9_E5; set(value) { this.asDynamic().RGB9_E5 = value }\n\ninline var WebGLRenderingContext.RGB10_A2: Number get() = this.asDynamic().RGB10_A2; set(value) { this.asDynamic().RGB10_A2 = value }\n\ninline var WebGLRenderingContext.UNSIGNED_INT_2_10_10_10_REV: Number get() = this.asDynamic().UNSIGNED_INT_2_10_10_10_REV; set(value) { this.asDynamic().UNSIGNED_INT_2_10_10_10_REV = value }\n\ninline var WebGLRenderingContext.UNSIGNED_INT_10F_11F_11F_REV: Number get() = this.asDynamic().UNSIGNED_INT_10F_11F_11F_REV; set(value) { this.asDynamic().UNSIGNED_INT_10F_11F_11F_REV = value }\n\ninline var WebGLRenderingContext.UNSIGNED_INT_5_9_9_9_REV: Number get() = this.asDynamic().UNSIGNED_INT_5_9_9_9_REV; set(value) { this.asDynamic().UNSIGNED_INT_5_9_9_9_REV = value }\n\ninline var WebGLRenderingContext.FLOAT_32_UNSIGNED_INT_24_8_REV: Number get() = this.asDynamic().FLOAT_32_UNSIGNED_INT_24_8_REV; set(value) { this.asDynamic().FLOAT_32_UNSIGNED_INT_24_8_REV = value }\n\ninline var WebGLRenderingContext.DEPTH_COMPONENT32F: Number get() = this.asDynamic().DEPTH_COMPONENT32F; set(value) { this.asDynamic().DEPTH_COMPONENT32F = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.texImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, format: Number, type: Number, pixels: ArrayBufferView?) { this.asDynamic().texImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.texImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, format: Number, type: Number, pixels: ArrayBufferView, offset: Number) { this.asDynamic().texImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels, offset) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.texImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, format: Number, type: Number, pixels: ImageBitmap) { this.asDynamic().texImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.texImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, format: Number, type: Number, pixels: ImageData) { this.asDynamic().texImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.texImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, format: Number, type: Number, pixels: HTMLVideoElement) { this.asDynamic().texImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.texImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, format: Number, type: Number, pixels: HTMLImageElement) { this.asDynamic().texImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.texImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, format: Number, type: Number, pixels: HTMLCanvasElement) { this.asDynamic().texImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.framebufferTextureLayer(target: Number, attachment: Number, texture: WebGLTexture?, level: Number, layer: Number) { this.asDynamic().framebufferTextureLayer(target, attachment, texture, level, layer) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.compressedTexImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, data: ArrayBufferView) { this.asDynamic().compressedTexImage3D(target, level, internalformat, width, height, depth, border, data) }\n\ninline fun WebGLRenderingContext.compressedTexImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, data: ArrayBufferView, offset: Number) { this.asDynamic().compressedTexImage3D(target, level, internalformat, width, height, depth, border, data, offset) }\n\ninline fun WebGLRenderingContext.compressedTexImage3D(target: Number, level: Number, internalformat: Number, width: Number, height: Number, depth: Number, border: Number, data: ArrayBufferView, offset: Number, length: Number) { this.asDynamic().compressedTexImage3D(target, level, internalformat, width, height, depth, border, data, offset, length) }\n\ninline var WebGLRenderingContext.TRANSFORM_FEEDBACK: Number get() = this.asDynamic().TRANSFORM_FEEDBACK; set(value) { this.asDynamic().TRANSFORM_FEEDBACK = value }\n\ninline var WebGLRenderingContext.INTERLEAVED_ATTRIBS: Number get() = this.asDynamic().INTERLEAVED_ATTRIBS; set(value) { this.asDynamic().INTERLEAVED_ATTRIBS = value }\n\ninline var WebGLRenderingContext.TRANSFORM_FEEDBACK_BUFFER: Number get() = this.asDynamic().TRANSFORM_FEEDBACK_BUFFER; set(value) { this.asDynamic().TRANSFORM_FEEDBACK_BUFFER = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.createTransformFeedback(): WebGLTransformFeedback = this.asDynamic().createTransformFeedback()\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.deleteTransformFeedback(transformFeedbac: WebGLTransformFeedback) { this.asDynamic().deleteTransformFeedback(transformFeedbac) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.bindTransformFeedback(target: Number, transformFeedback: WebGLTransformFeedback?) { this.asDynamic().bindTransformFeedback(target, transformFeedback) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.beginTransformFeedback(primitiveMode: Number) { this.asDynamic().beginTransformFeedback(primitiveMode) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.endTransformFeedback() { this.asDynamic().endTransformFeedback() }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.transformFeedbackVaryings(program: WebGLProgram, varyings: Array<String>, bufferMode: Number) { this.asDynamic().transformFeedbackVaryings(program, varyings, bufferMode) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.clearBufferfv(buffer: Number, drawbuffer: Number, values: ArrayBufferView, srcOffset: Number?) { this.asDynamic().clearBufferfv(buffer, drawbuffer, values, srcOffset) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.clearBufferiv(buffer: Number, drawbuffer: Number, values: ArrayBufferView, srcOffset: Number?) { this.asDynamic().clearBufferiv(buffer, drawbuffer, values, srcOffset) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.clearBufferuiv(buffer: Number, drawbuffer: Number, values: ArrayBufferView, srcOffset: Number?) { this.asDynamic().clearBufferuiv(buffer, drawbuffer, values, srcOffset) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun WebGLRenderingContext.clearBufferfi(buffer: Number, drawbuffer: Number, depth: Number, stencil: Number) { this.asDynamic().clearBufferfi(buffer, drawbuffer, depth, stencil) }\n\ninline var ImageBitmap.width: Number get() = this.asDynamic().width; set(value) { this.asDynamic().width = value }\n\ninline var ImageBitmap.height: Number get() = this.asDynamic().height; set(value) { this.asDynamic().height = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun ImageBitmap.close() { this.asDynamic().close() }\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\nexternal interface WebGLQuery : WebGLObject {\n    companion object {\n        var prototype: WebGLQuery\n    }\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\nexternal interface WebGLSampler : WebGLObject {\n    companion object {\n        var prototype: WebGLSampler\n    }\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\nexternal interface WebGLSync : WebGLObject {\n    companion object {\n        var prototype: WebGLSync\n    }\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\nexternal interface WebGLTransformFeedback : WebGLObject {\n    companion object {\n        var prototype: WebGLTransformFeedback\n    }\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\nexternal interface WebGLVertexArrayObject : WebGLObject {\n    companion object {\n        var prototype: WebGLVertexArrayObject\n    }\n}\n\ninline var VRDisplay.capabilities: VRDisplayCapabilities get() = this.asDynamic().capabilities; set(value) { this.asDynamic().capabilities = value }\n\ninline var VRDisplay.depthFar: Number get() = this.asDynamic().depthFar; set(value) { this.asDynamic().depthFar = value }\n\ninline var VRDisplay.depthNear: Number get() = this.asDynamic().depthNear; set(value) { this.asDynamic().depthNear = value }\n\ninline var VRDisplay.displayId: Number get() = this.asDynamic().displayId; set(value) { this.asDynamic().displayId = value }\n\ninline var VRDisplay.displayName: String get() = this.asDynamic().displayName; set(value) { this.asDynamic().displayName = value }\n\ninline var VRDisplay.isConnected: Boolean get() = this.asDynamic().isConnected; set(value) { this.asDynamic().isConnected = value }\n\ninline var VRDisplay.isPresenting: Boolean get() = this.asDynamic().isPresenting; set(value) { this.asDynamic().isPresenting = value }\n\ninline var VRDisplay.stageParameters: VRStageParameters? get() = this.asDynamic().stageParameters; set(value) { this.asDynamic().stageParameters = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.cancelAnimationFrame(handle: Number) { this.asDynamic().cancelAnimationFrame(handle) }\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.exitPresent(): Promise<Unit> = this.asDynamic().exitPresent()\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.getEyeParameters(whichEye: String): VREyeParameters = this.asDynamic().getEyeParameters(whichEye)\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.getFrameData(frameData: VRFrameData): Boolean = this.asDynamic().getFrameData(frameData)\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.getLayers(): Array<VRLayer> = this.asDynamic().getLayers()\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.getPose(): VRPose = this.asDynamic().getPose()\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.getImmediatePose(): VRPose = this.asDynamic().getImmediatePose()\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.requestAnimationFrame(callback: FrameRequestCallback): Number = this.asDynamic().requestAnimationFrame(callback)\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.requestPresent(layers: Array<VRLayer>): Promise<Unit> = this.asDynamic().requestPresent(layers)\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.resetPose() { this.asDynamic().resetPose() }\n\n/* extending interface from lib.dom.d.ts */\ninline fun VRDisplay.submitFrame() { this.asDynamic().submitFrame() }\n\ninline fun VRDisplay.submitFrame(pose: VRPose) { this.asDynamic().submitFrame(pose) }\n\nexternal object VRDisplay {\n    var prototype: Any\n}\n\ninline var VRLayer.leftBounds: dynamic /* Array<Number> | Float32Array | Nothing? */ get() = this.asDynamic().leftBounds; set(value) { this.asDynamic().leftBounds = value }\n\ninline var VRLayer.rightBounds: dynamic /* Array<Number> | Float32Array | Nothing? */ get() = this.asDynamic().rightBounds; set(value) { this.asDynamic().rightBounds = value }\n\ninline var VRLayer.source: HTMLCanvasElement? get() = this.asDynamic().source; set(value) { this.asDynamic().source = value }\n\ninline var VRDisplayCapabilities.canPresent: Boolean get() = this.asDynamic().canPresent; set(value) { this.asDynamic().canPresent = value }\n\ninline var VRDisplayCapabilities.hasExternalDisplay: Boolean get() = this.asDynamic().hasExternalDisplay; set(value) { this.asDynamic().hasExternalDisplay = value }\n\ninline var VRDisplayCapabilities.hasOrientation: Boolean get() = this.asDynamic().hasOrientation; set(value) { this.asDynamic().hasOrientation = value }\n\ninline var VRDisplayCapabilities.hasPosition: Boolean get() = this.asDynamic().hasPosition; set(value) { this.asDynamic().hasPosition = value }\n\ninline var VRDisplayCapabilities.maxLayers: Number get() = this.asDynamic().maxLayers; set(value) { this.asDynamic().maxLayers = value }\n\ninline var VREyeParameters.fieldOfView: VRFieldOfView get() = this.asDynamic().fieldOfView; set(value) { this.asDynamic().fieldOfView = value }\n\ninline var VREyeParameters.offset: Float32Array get() = this.asDynamic().offset; set(value) { this.asDynamic().offset = value }\n\ninline var VREyeParameters.renderHeight: Number get() = this.asDynamic().renderHeight; set(value) { this.asDynamic().renderHeight = value }\n\ninline var VREyeParameters.renderWidth: Number get() = this.asDynamic().renderWidth; set(value) { this.asDynamic().renderWidth = value }\n\ninline var VRFieldOfView.downDegrees: Number get() = this.asDynamic().downDegrees; set(value) { this.asDynamic().downDegrees = value }\n\ninline var VRFieldOfView.leftDegrees: Number get() = this.asDynamic().leftDegrees; set(value) { this.asDynamic().leftDegrees = value }\n\ninline var VRFieldOfView.rightDegrees: Number get() = this.asDynamic().rightDegrees; set(value) { this.asDynamic().rightDegrees = value }\n\ninline var VRFieldOfView.upDegrees: Number get() = this.asDynamic().upDegrees; set(value) { this.asDynamic().upDegrees = value }\n\ninline var VRFrameData.leftProjectionMatrix: Float32Array get() = this.asDynamic().leftProjectionMatrix; set(value) { this.asDynamic().leftProjectionMatrix = value }\n\ninline var VRFrameData.leftViewMatrix: Float32Array get() = this.asDynamic().leftViewMatrix; set(value) { this.asDynamic().leftViewMatrix = value }\n\ninline var VRFrameData.pose: VRPose get() = this.asDynamic().pose; set(value) { this.asDynamic().pose = value }\n\ninline var VRFrameData.rightProjectionMatrix: Float32Array get() = this.asDynamic().rightProjectionMatrix; set(value) { this.asDynamic().rightProjectionMatrix = value }\n\ninline var VRFrameData.rightViewMatrix: Float32Array get() = this.asDynamic().rightViewMatrix; set(value) { this.asDynamic().rightViewMatrix = value }\n\ninline var VRFrameData.timestamp: Number get() = this.asDynamic().timestamp; set(value) { this.asDynamic().timestamp = value }\n\ninline var VRPose.angularAcceleration: Float32Array? get() = this.asDynamic().angularAcceleration; set(value) { this.asDynamic().angularAcceleration = value }\n\ninline var VRPose.angularVelocity: Float32Array? get() = this.asDynamic().angularVelocity; set(value) { this.asDynamic().angularVelocity = value }\n\ninline var VRPose.linearAcceleration: Float32Array? get() = this.asDynamic().linearAcceleration; set(value) { this.asDynamic().linearAcceleration = value }\n\ninline var VRPose.linearVelocity: Float32Array? get() = this.asDynamic().linearVelocity; set(value) { this.asDynamic().linearVelocity = value }\n\ninline var VRPose.orientation: Float32Array? get() = this.asDynamic().orientation; set(value) { this.asDynamic().orientation = value }\n\ninline var VRPose.position: Float32Array? get() = this.asDynamic().position; set(value) { this.asDynamic().position = value }\n\ninline var VRPose.timestamp: Number get() = this.asDynamic().timestamp; set(value) { this.asDynamic().timestamp = value }\n\ninline var VRStageParameters.sittingToStandingTransform: Float32Array? get() = this.asDynamic().sittingToStandingTransform; set(value) { this.asDynamic().sittingToStandingTransform = value }\n\ninline var VRStageParameters.sizeX: Number? get() = this.asDynamic().sizeX; set(value) { this.asDynamic().sizeX = value }\n\ninline var VRStageParameters.sizeY: Number? get() = this.asDynamic().sizeY; set(value) { this.asDynamic().sizeY = value }\n\n/* extending interface from lib.dom.d.ts */\ninline fun Navigator.getVRDisplays(): Promise<Array<VRDisplay>> = this.asDynamic().getVRDisplays()\n\ninline var Navigator.activeVRDisplays: Array<VRDisplay> get() = this.asDynamic().activeVRDisplays; set(value) { this.asDynamic().activeVRDisplays = value }\n\ninline var Window.onvrdisplayconnected: ((self: Window, ev: Event) -> Any)? get() = this.asDynamic().onvrdisplayconnected; set(value) { this.asDynamic().onvrdisplayconnected = value }\n\ninline var Window.onvrdisplaydisconnected: ((self: Window, ev: Event) -> Any)? get() = this.asDynamic().onvrdisplaydisconnected; set(value) { this.asDynamic().onvrdisplaydisconnected = value }\n\ninline var Window.onvrdisplaypresentchange: ((self: Window, ev: Event) -> Any)? get() = this.asDynamic().onvrdisplaypresentchange; set(value) { this.asDynamic().onvrdisplaypresentchange = value }\n\n///* extending interface from lib.dom.d.ts */\n//inline fun Window.addEventListener(type: String /* \"vrdisplayconnected\" */, listener: (ev: Event) -> Any) { this.asDynamic().addEventListener(type, listener) }\n//\n//inline fun Window.addEventListener(type: String /* \"vrdisplayconnected\" */, listener: (ev: Event) -> Any, useCapture: Boolean) { this.asDynamic().addEventListener(type, listener, useCapture) }\n//\n///* extending interface from lib.dom.d.ts */\n//inline fun Window.addEventListener(type: String /* \"vrdisplaydisconnected\" */, listener: (ev: Event) -> Any) { this.asDynamic().addEventListener(type, listener) }\n//\n//inline fun Window.addEventListener(type: String /* \"vrdisplaydisconnected\" */, listener: (ev: Event) -> Any, useCapture: Boolean) { this.asDynamic().addEventListener(type, listener, useCapture) }\n//\n///* extending interface from lib.dom.d.ts */\n//inline fun Window.addEventListener(type: String /* \"vrdisplaypresentchange\" */, listener: (ev: Event) -> Any) { this.asDynamic().addEventListener(type, listener) }\n//\n//inline fun Window.addEventListener(type: String /* \"vrdisplaypresentchange\" */, listener: (ev: Event) -> Any, useCapture: Boolean) { this.asDynamic().addEventListener(type, listener, useCapture) }\n\ninline var Gamepad.displayId: Number get() = this.asDynamic().displayId; set(value) { this.asDynamic().displayId = value }\n\nexternal interface XRSpace : EventTarget\n\nexternal interface XRRenderState {\n    var depthNear: Number?\n        get() = definedExternally\n        set(value) = definedExternally\n    var depthFar: Number?\n        get() = definedExternally\n        set(value) = definedExternally\n    var inlineVerticalFieldOfView: Number?\n        get() = definedExternally\n        set(value) = definedExternally\n    var baseLayer: XRWebGLLayer?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\nexternal interface XRInputSource {\n    var handedness: String /* \"none\" | \"left\" | \"right\" */\n    var targetRayMode: String /* \"gaze\" | \"tracked-pointer\" | \"screen\" */\n    var targetRaySpace: XRSpace\n    var gripSpace: XRSpace?\n        get() = definedExternally\n        set(value) = definedExternally\n    var gamepad: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n    var profiles: Array<String>\n}\n\nexternal interface XRSessionInit {\n    var optionalFeatures: Array<String /* \"viewer\" | \"local\" | \"local-floor\" | \"bounded-floor\" | \"unbounded\" */>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var requiredFeatures: Array<String /* \"viewer\" | \"local\" | \"local-floor\" | \"bounded-floor\" | \"unbounded\" */>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\nexternal interface `T$157` {\n    var enabled: Boolean\n}\n\nexternal interface `T$158` {\n    var planeDetectionState: `T$157`?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\nexternal interface XRSession : XRAnchorCreator {\n    var addEventListener: Function<*>\n    var removeEventListener: Function<*>\n    fun requestReferenceSpace(type: String): Promise<XRReferenceSpace>\n    fun updateRenderState(XRRenderStateInit: XRRenderState): Promise<Unit>\n    var requestAnimationFrame: Function<*>\n    fun end(): Promise<Unit>\n    var renderState: XRRenderState\n    var inputSources: Array<XRInputSource>\n    fun requestHitTest(ray: XRRay, referenceSpace: XRReferenceSpace): Promise<Array<XRHitResult>>\n    fun updateWorldTrackingState(options: `T$158`)\n}\n\nexternal interface XRReferenceSpace : XRSpace {\n    fun getOffsetReferenceSpace(originOffset: XRRigidTransform): XRReferenceSpace\n    var onreset: Any\n}\n\ntypealias XRPlaneSet = Set<XRPlane>\n\ntypealias XRAnchorSet = Set<XRAnchor>\n\nexternal interface `T$159` {\n    var detectedPlanes: XRPlaneSet?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\nexternal interface XRFrame {\n    var session: XRSession\n    fun getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose?\n    fun getPose(space: XRSpace, baseSpace: XRSpace): XRPose?\n    var trackedAnchors: XRAnchorSet?\n        get() = definedExternally\n        set(value) = definedExternally\n    var worldInformation: `T$159`\n}\n\nexternal interface XRViewerPose : XRPose {\n    var views: Array<XRView>\n}\n\nexternal interface XRPose {\n    var transform: XRRigidTransform\n    var emulatedPosition: Boolean\n}\n\nexternal interface XRWebGLLayerOptions {\n    var antialias: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var alpha: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var multiview: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var framebufferScaleFactor: Number?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\nexternal interface XRWebGLLayer {\n    var framebuffer: WebGLFramebuffer\n    var framebufferWidth: Number\n    var framebufferHeight: Number\n    var getViewport: Function<*>\n\n    companion object {\n        var prototype: XRWebGLLayer\n    }\n}\n\nexternal open class XRRigidTransform {\n    constructor(matrix: Float32Array, direction: DOMPointInit)\n    constructor(matrix: DOMPointInit, direction: DOMPointInit)\n    open var position: DOMPointReadOnly\n    open var orientation: DOMPointReadOnly\n    open var matrix: Float32Array\n    open var inverse: XRRigidTransform\n}\n\nexternal interface XRView {\n    var eye: String /* \"none\" | \"left\" | \"right\" */\n    var projectionMatrix: Float32Array\n    var transform: XRRigidTransform\n}\n\nexternal interface XRInputSourceChangeEvent {\n    var session: XRSession\n    var removed: Array<XRInputSource>\n    var added: Array<XRInputSource>\n}\n\nexternal interface XRInputSourceEvent : Event {\n    var frame: XRFrame\n    var inputSource: XRInputSource\n}\n\nexternal open class XRRay {\n    constructor(transformOrOrigin: XRRigidTransform, direction: DOMPointInit)\n    constructor(transformOrOrigin: DOMPointInit, direction: DOMPointInit)\n    open var origin: DOMPointReadOnly\n    open var direction: DOMPointReadOnly\n    open var matrix: Float32Array\n}\n\nexternal interface XRHitResult {\n    var hitMatrix: Float32Array\n}\n\nexternal interface XRAnchor {\n    var id: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var anchorSpace: XRSpace\n    var lastChangedTime: Number\n    fun detach()\n}\n\nexternal interface XRPlane : XRAnchorCreator {\n    var orientation: String /* \"Horizontal\" | \"Vertical\" */\n    var planeSpace: XRSpace\n    var polygon: Array<DOMPointReadOnly>\n    var lastChangedTime: Number\n}\n\nexternal interface XRAnchorCreator {\n    fun createAnchor(pose: XRPose, referenceSpace: XRReferenceSpace): Promise<XRAnchor>\n    fun createAnchor(pose: XRRigidTransform, referenceSpace: XRReferenceSpace): Promise<XRAnchor>\n}","package BABYLON.extension\n\nimport BABYLON.*\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.events.Event\nimport kotlin.browser.document\nimport kotlin.browser.window\n\nfun createScene(canvasElementId:String, antiAlias:Boolean): Scene {\n\tdocument.addEventListener(\"oncontextmenu\", { event ->\n\t\tevent.stopImmediatePropagation()\n\t})\n\tval canvas = document.getElementById(canvasElementId)\n\tif (!(canvas is HTMLCanvasElement)) {\n\t\tthrow Error(\"Cant find canvas with id $canvasElementId\")\n\t}\n\n\tval engine = Engine(canvas, antiAlias)\n\tval scene = Scene(engine)\n\tval t = TargetCamera(\"empty\", Vector3(5.0, 5.0, 5.0), scene)\n\tt.setTarget(Vector3(0.0, 0.0, 0.0))\n\tscene.activeCameras += t\n\treturn scene\n}\n\nfun Scene.runRenderLoop() {\n\t// run the render loop\n\tval engine = this.getEngine()\n\tvar lastException: Throwable? = null\n\n\tval onResize: (Event) -> Unit = {\n\t\tif (lastException == null) {\n\t\t\tengine.resize()\n\t\t}\n\t}\n\n\tval onRender: () -> Unit = {\n\t\tif (lastException == null) {\n\t\t\ttry {\n\t\t\t\trender()\n\t\t\t} catch (exception: Throwable) {\n\t\t\t\tlastException = exception\n\t\t\t\tconsole.error(lastException)\n\t\t\t}\n\t\t}\n\t}\n\n\tengine.runRenderLoop(onRender)\n\twindow.addEventListener(\"resize\", onResize)\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n"],"names":[],"mappings":"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"}