package casper.asset
/**
 * 	Its file generated by assets.py
 */
import casper.signal.concrete.*
import casper.signal.util.EitherCollection

fun createAssetsArrayLoader(manager: AssetManager): EitherFuture<Assets, String> {
	val result = EitherSignal<Assets, String>()
	val collection = EitherCollection()
			collection.add(manager.models.loader("robot_builder.babylon"))
			collection.add(manager.models.loader("animation.babylon"))
			collection.add(manager.models.loader("drill.babylon"))
			collection.add(manager.models.loader("construction_robot.babylon"))
			collection.add(manager.models.loader("robot_truck.babylon"))
			collection.add(manager.models.loader("scene.babylon"))
			collection.add(manager.models.loader("cube.babylon"))
			collection.add(manager.models.loader("robot_cargo.babylon"))
			collection.add(manager.models.loader("model.babylon"))
			collection.add(manager.models.loader("materials.babylon"))
	val future = collection.future()
	future.then({
		try {
			val assets = Assets(manager)
			result.accept(assets)
		}
		catch (t:Throwable) {
			result.reject(t.toString())
		}
	}, {
		result.reject(it.joinToString("\n\n"))
	})
	return result
}

class Assets(manager: AssetManager) {
		val robot_builder = manager.getModel("robot_builder.babylon")!!
		val animation = manager.getModel("animation.babylon")!!
		val drill = manager.getModel("drill.babylon")!!
		val construction_robot = manager.getModel("construction_robot.babylon")!!
		val robot_truck = manager.getModel("robot_truck.babylon")!!
		val scene = manager.getModel("scene.babylon")!!
		val cube = manager.getModel("cube.babylon")!!
		val robot_cargo = manager.getModel("robot_cargo.babylon")!!
		val model = manager.getModel("model.babylon")!!
		val materials = manager.getModel("materials.babylon")!!
}

